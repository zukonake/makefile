SOURCE_DIR = .
OBJ_DIR = bin
DEPEND_DIR = depend
EXTERNAL_DIR = ..
EXTERNAL_SOURCE_DIR = $(EXTERNAL_DIR)/src
EXTERNAL_OBJ_DIR = $(EXTERNAL_DIR)/bin
INCLUDE_DIR = $(EXTERNAL_DIR)/include
LIB_DIR = lib

TEST_DIR = test

TARGET = test

CPP_FILES = $(shell find $(SOURCE_DIR) -type f -name "*.cpp" -printf '%p ')
EXTERNAL_CPP_FILES = $(shell find $(EXTERNAL_SOURCE_DIR) -type f -name "*.cpp" -printf '%p ')
OBJ_FILES = $(addprefix $(OBJ_DIR)/,$(patsubst %.cpp,%.o,$(notdir $(CPP_FILES))))
EXTERNAL_OBJ_FILES = $(addprefix $(EXTERNAL_OBJ_DIR)/,$(patsubst %.cpp,%.o,$(notdir $(EXTERNAL_CPP_FILES))))

DEBUG_FLAGS = -g -O0 -DDEBUG
WARNING_FLAGS = -Wall -Wextra
STD = --std=c++11
INCLUDES = -I $(SOURCE_DIR) -I $(INCLUDE_DIR)
LDLIBS = -lboost_unit_test_framework
LDFLAGS = $(INCLUDES) $(STD) $(WARNING_FLAGS) $(DEBUG_FLAGS) -L $(LIB_DIR) $(LDLIBS)
CXXFLAGS = $(INCLUDES) $(STD) $(WARNING_FLAGS) $(DEBUG_FLAGS)

.PHONY : clean

$(TARGET) : $(OBJ_FILES) $(EXTERNAL_OBJ_FILES)
	$(CXX) $(LDFLAGS) $(OBJ_FILES) $(EXTERNAL_OBJ_FILES) -o $@ 

.SECONDEXPANSION:
$(OBJ_DIR)/%.o : $$(shell find $(SOURCE_DIR) -type f -name %.cpp)
	@mkdir -p $(OBJ_DIR)
	@mkdir -p $(DEPEND_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@
	$(CXX) $(CXXFLAGS) -MM $< > $(DEPEND_DIR)/$*.d
	@sed -i '1s/^/$(OBJ_DIR)\//' $(DEPEND_DIR)/$*.d

clean :
	$(RM) -r $(OBJ_DIR) $(DEPEND_DIR) $(TARGET)

-include $(subst $(OBJ_DIR)/,$(DEPEND_DIR)/,$(patsubst %.o,%.d,$(OBJ_FILES)))
